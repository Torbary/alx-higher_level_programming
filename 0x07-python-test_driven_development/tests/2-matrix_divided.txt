DOCTEST FOR 2-MATRIX_DIVIDED.PY
===============================

``matrix_divided()`` returns a new matrix with all elements scalar divided

SUCCESSFUL TEST CONDITIONS
==========================

testing function with scaler division with single digit div
::
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

testing function with scaler division with multi-digit div
::
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 33)
[[0.03, 0.06, 0.09], [0.12, 0.15, 0.18]]

testing function with scaler division with large div(3 digits)
::
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 333)
[[0.0, 0.01, 0.01], [0.01, 0.02, 0.02]]

testing function with scaler division with larger div(4 digits)
::
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3333)
[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

testing funtion with scaler division with negative div
::
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], -3)
[[-0.33, -0.67, -1.0], [-1.33, -1.67, -2.0]]

testing function with scaler division with floats
::
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 1.2)
[[0.83, 1.67, 2.5], [3.33, 4.17, 5.0]]


TEST CONDITIONS WHERE AN ERROR IS RAISED
========================================

testing how function handles None argument
::
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
>>> matrix_divided(None, None)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

testing how function handles incorrect matrix argument
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
>>> matrix_divided({9, 9, 7}, 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

testing how fucntion handles one None argument
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
>>> matrix_divided([None], 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

testing how function handles an incorrect type
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
>>> matrix_divided(["string"], 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

testing how function handles an incorrect type for element in matrix
::
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
>>> matrix_divided([["string"], ["here"]], 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

testing how function handles rows of different lengths
::
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
>>> matrix_divided([[1, 2, 3], [5, 6, 7]], 0)
Traceback (most recent call last):
ZeroDivisionError: division by zero

testing how function handles divison by incorrect type
::
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
>>> matrix_divided([[1, 2, 3], [5, 6, 7]], "25")
Traceback (most recent call last):
TypeError: div must be a number


